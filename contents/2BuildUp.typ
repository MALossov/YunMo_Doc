= 系统组成及功能说明

== 整体介绍

根据设计，本组绘制了如下系统框图，并将在之后根据框图进行各部分的详细讲解：

#figure(
  image("../images/SystemDiagram_Colord.svg",width: 18cm),
  caption: "总体系统框图"
)<系统框图>

可能乍一看这个系统框图会显得比较庞大、难以分辨每一部分，但其实每个部分的功能相当清晰和明确。在接下来的整体说明当中，我将整体介绍使用到的外设和作用。

=== 框图一览

根据如上 @系统框图 ,可以较好地看到我们的系统主要依托FPGA芯片和几个基本的片外外设——其中，外设在框图中的位置为 _FPGA板卡内资源_ 的大框 之外的四个小框，即为：

#figure(
  table(
    columns: (auto,auto,auto,auto,auto),
    [*片外外设名称*],[外部按键输入],[摄像头OV5640],[DRAM芯片],[RTL8201F 百兆网芯片],
    [*片内模块对应*],[模式切换],[CMOS摄像头模块],[DDR存储模块],[UDP顶层模块],
    [*外设实现功能*],[使用 *单按键* 对于模式进行切换],[配置外部摄像头/转存摄像头捕获数据],[使用DRAM生成视频缓存],[配置以太网向上位机发送],
    [*代码中模块名称*],[module_shift],[cmos_8_16bit#linebreak()和i2c_config],[DDR3_Memory\_#linebreak()Interface_Top_inst],[udp_top],
  ),
  caption: "片外外设和对应接口模块一览"
)<外设一览表>

==== 主要外设

根据@外设一览表 所示， 面对各个外设、FPGA板卡主要完成的任务大略如下：

+ *外部按键输入*:通过常用的按键滤波、消抖操作，实现使用单键切换状态、及时进入下一状态的操作。
+ *摄像头OV5640*： 本次我们使用CMOS芯片 _OV5640_ 作为采集视频信号的摄像头芯片，其拥有SCCB接口和DVP接口提供配置和数据传输。
  - *SCCB接口* ：时序上和 $I^2 C$接口一致，作用为配置 _OV5640_ 芯片的相关寄存器，修改输出图像的格式、画幅等。
  - *DVP接口* ： DVP（Digital Video Port）是非差分信号的并口传输，在本次实验当中、数据位为有8bit，是。在配置寄存器之后，按照较为标准的VGA时序等进行发送、并使用同步信号等判断是否已经接收完成一帧。@_2020_cmos
+ *DRAM芯片*： 本次使用的底板中，拥有一块DDR3的DRAM，结合高云提供的 _Video_Frame_Buffer_ 软核，构建一个含有3帧的视频缓存。使用近似于VGA标准的同步信号进行数据的传输，用于接收并行视频输入数据，然后缓存至存储器，并同时输出并行视频数据，从而实现帧缓存的功能。@gowin_2023_gowin
+ *RTL8201F*： 使用底板提供的 _RTL8201F_ 百兆以太网芯片，用于实现物理层的接口转换和信号调理。它支持10/100M自适应以太网速率，并具备自动协商功能，能够根据连接的设备自动选择最佳的速率。该芯片通过提供标准的MII（介质独立接口）和RMII（简化的介质独立接口）接口，与主控芯片（如单片机）进行通信。@_2023_phyrtl8201fcsdn\

==== 外设实物图

综合本次外设和实际应用情况，我们在这里给出实物图、并标注了如上四个外设所在的位置如 ：@主要功能外设标注

#figure(
  image("../images/BOARD_LOOKING_DOWN_Writed.png",width: 18cm,),
  caption: "主要功能外设标注"
)<主要功能外设标注>

=== 内部模块

由于熟练使用外设即可完成大部分基础功能，内部模块的撰写主要作用为： *增强* 和 *融合*。

在连接部分当中，一般情况下，多为外部外设/软核的输出的位宽不一致、因此会采取FIFO等方式、重新设计数据位宽度、让生成与等待异步的数据能够被较好地放入另一个时钟当中。因此、这一部分由于出现在两个外设支持模块相互连接的地方、故被不再被单独列出。

而在增强部分中，我们主要只考虑 *视频处理模块*：在这一部分中，我们会进行需要进行的工作，完成如 @VIP模块功能 所示的全部功能，
#figure(
  table(columns:(auto,auto,auto,auto),
  [*功能名称*],[灰度处理],[二值化],[边缘检测]),
  caption: "视频处理模块功能"
)<VIP模块功能>

==== 视频上位机模块

为实现功能，我们构建了如@上位机 所示的上位机模块：

#figure(
  image("../images/上位机.png",width:13cm),
  caption: "MOS法师上位机软件"
)<上位机>

在这个上位机中，能够通过较为简单地调节左侧的各项设置进行接收模式的修改，
同时在软件的下方，也具有较为简洁明了的帧率指示、分辨率指示。

上位机使用的接收UDP数据格式为：

+ *帧头*：如果该次发送为首次发送，则会十六进制发送`0xf05aa50f`四个字节,进行表示：这个UDP报文为需要被上位机解析的报文。而上位机也会继续解析余下这一帧的全部报文。
+ *分辨率信息*：如果该次发送为首次发送，则会接着帧头按照16进制转换发送分辨率信息$640 times 480$,表示本帧的分辨率。
+ *帧内容*：以太网会按照行内容发送帧内容，每行的长度为 $640$ 个标准 RGB5-6-5的数据。

因此，如果是首行，则会发送长度为：1288的数据，如果是后续的`479`行，则会发送数据长度为1280的数据、因为少了一个分辨率的信息。可以使用`Wireshark` 软件进行以太帧的捕获，UDP报文情况详见@以太网抓帧：

#figure(
  image("../images/UDP_Wiresharked.png"),
  caption: "以太网抓帧UDP报文表"
)<以太网抓帧>

== 各模块介绍

=== UDP模块

MII （Media Independent Interface（介质无关接口）或称为媒体独立接口，它是IEEE-802.3定义的以太网行业标准。用以连接以太网MAC层和PHY芯片，常用接口有：MII、RMII、SMII、GMII、RGMII。@_19

在本次UDP的实验当中、我们使用的芯片 _RTL8201F_ 使用的是以太网当中的RMII接口， @RMII物理接口示意 为 RMII 接口连接示意图。

#figure(
  image("../images/RMII_PHY.png",width:8cm),
  caption: "RMII物理接口示意"
)<RMII物理接口示意>

#figure(
  image("../images/UDP_Diagram.svg"),
  caption: "UDP模块框图"
)<UDP模块框图>

#figure(
  image("../images/UDP_State.svg",width: 12cm),
  caption: "UDP模块状态转移图"
)<UDP模块状态转移图>

=== CMOS图像收集模块

#figure(
  image("../images/cmos_i2c.svg",width: 12cm),
  caption: "CMOS配置和数据传输框图"
)<CMOS配置和数据传输框图>

=== 图像存储/数据流转移模块

#figure(
  image("../images/Memory_IP.svg",width: 12cm),
  caption: "存储模块系统框图"
)<存储模块系统框图>

=== 图像处理模块

#figure(
  image("../images/vip.svg"),
  caption:"图像数据处理模块"
)<图像数据处理模块>


=== 模式切换模块

在模式切换模块当中，

#figure(
  image("../images/module_shift.svg",width: 12cm),
  caption: "模式切换模块框图"
)<模式切换模块框图>

